// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.5.0.0
//      SpecFlow Generator Version:3.5.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace UITests.Tests.Budget
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("BudgetDolar")]
    public partial class BudgetDolarFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "BudgetDolar.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("pt-br"), "Tests/Budget", "BudgetDolar", "\tAdição, edição e remoção de orçamentos no sistema.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cadastrar orcamento em dólar com dez itens")]
        public virtual void CadastrarOrcamentoEmDolarComDezItens()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cadastrar orcamento em dólar com dez itens", null, tagsOfScenario, argumentsOfScenario);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("que será necessário selecionar um representante que aceite orçamento dólar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "prazoEntrega",
                            "dataProvavelFechamento",
                            "dataEntrega",
                            "obra"});
                table1.AddRow(new string[] {
                            "A combinar",
                            "20/12/2025",
                            "20/12/2025",
                            "1139_2016.05,04_COMSA_FLUXO"});
#line 8
 testRunner.When("inserir os dados para gerar um orçamento novo", ((string)(null)), table1, "Quando ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "nome"});
                table2.AddRow(new string[] {
                            "RG"});
                table2.AddRow(new string[] {
                            "AR"});
                table2.AddRow(new string[] {
                            "JN"});
                table2.AddRow(new string[] {
                            "VAT"});
                table2.AddRow(new string[] {
                            "ADLQ"});
                table2.AddRow(new string[] {
                            "AT"});
                table2.AddRow(new string[] {
                            "FKA"});
                table2.AddRow(new string[] {
                            "AGS"});
                table2.AddRow(new string[] {
                            "AWK"});
                table2.AddRow(new string[] {
                            "AWG"});
#line 11
 testRunner.And("adicionar os produtos no orcamento", ((string)(null)), table2, "E ");
#line hidden
#line 23
 testRunner.Then("gerar o documento proforma", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 24
 testRunner.And("mudar status do orçamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 25
 testRunner.And("inserir uma revisão no orcamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 26
 testRunner.And("gerar o orçamento em pdf", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Rateio de Valores em Orçamento em Dólar")]
        public virtual void RateioDeValoresEmOrcamentoEmDolar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Rateio de Valores em Orçamento em Dólar", null, tagsOfScenario, argumentsOfScenario);
#line 28
 this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 29
 testRunner.Given("que será necessário selecionar um representante que aceite orçamento dólar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 30
 testRunner.Then("é necessário preencher os campos necessários para um novo orçamento em Dólar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 31
 testRunner.Then("Verificar que o campo Ratear documentação entre os itens está ativo e não é possí" +
                        "vel desmarcar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 32
 testRunner.And("verificar que o valor de documentação vem como default $ 200,00", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 33
 testRunner.When("inserir 10 itens AT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 34
 testRunner.Then("necessário verificar o valor arredondado para o Valor de documentação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 35
 testRunner.When("alterar status do orçamento para informado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 36
 testRunner.Then("verificar se o valor rateado permanece o mesmo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 37
 testRunner.And("ao criar uma revisão", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 38
 testRunner.Then("deve permanecer o mesmo valor arredondado de rateio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 39
 testRunner.And("verificar o valor do rateio de documentação dos 10 itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 40
 testRunner.Then("alterar o tipo de orçamento como Para Compra", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 41
 testRunner.And("preencher os dados necessários para o tipo compra", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 42
 testRunner.Then("alterar a condição comercial de 05 para 120ddl", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 43
 testRunner.And("verificar que não deve ser alterado o rateio da documentação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 44
 testRunner.And("verificar que os valores de documentação nos itens não deve ser alterado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 45
 testRunner.When("alterar a taxa de embalagem para 6%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 46
 testRunner.Then("não deve alterar o valor do rateio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 47
 testRunner.And("não deve alterar o valor da documentação na grid de itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 48
 testRunner.When("alterar informação e alterar o fator dos itens para 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 49
 testRunner.Then("Verificar que o rateio foi alterado para poder arredondar corretamente", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 50
 testRunner.And("Verificar o valor da documentação na grid de itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 51
 testRunner.When("duplicar os 10 itens com o mesmo fator de 10", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 52
 testRunner.Then("verificar que o valor do rateio foi alterado para adequar o arrendondamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 53
 testRunner.And("verificar o novo valor da documentação na grid de itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 54
 testRunner.When("inserir o gasto FOB", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 55
 testRunner.Then("não deve alterar o valor de rateio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 56
 testRunner.When("inserir o gato de Frete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 57
 testRunner.Then("não deve alterar o valor de rateio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 58
 testRunner.When("alterar o valor da cotação para exportação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 59
 testRunner.Then("verificar o novo valor do rateio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 60
 testRunner.And("verificar o novo valor de documentação na grid de orçamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 61
 testRunner.When("clicar em atualizar preço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 62
 testRunner.Then("Verificar o valor presente na documentação e rateio", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 63
 testRunner.And("verificar o novo valor das documentações na grid de itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 64
 testRunner.Then("gerar o Proforma", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 65
 testRunner.And("gerar Excel cotação", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 66
 testRunner.And("verificar que as documentações permanecem com o mesmo valor", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 67
 testRunner.Then("Alterar o Status para Informado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 68
 testRunner.And("alterar Status para fechado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 69
 testRunner.And("verificar se os valores não foram alterados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Analise de pré fechamento Orçamento Produtos em Dólar")]
        public virtual void AnaliseDePreFechamentoOrcamentoProdutosEmDolar()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Analise de pré fechamento Orçamento Produtos em Dólar", null, tagsOfScenario, argumentsOfScenario);
#line 71
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 72
testRunner.Given("que o orçamentista está localizado na criação de um orçamento Produto em Dólar", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Dado ");
#line hidden
#line 73
testRunner.When("Preencher os dados do orçamento para o tipo Compra com o cliente A H EMPREENDIMEN" +
                        "TOS COMERCIAL LTDA", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 74
testRunner.And("inserir cinco itens no orçamento sem data de entrega", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 75
testRunner.When("alterar o status para Informado, verificar que irá existir um novo botão que é pa" +
                        "ra analise de pré fechamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Quando ");
#line hidden
#line 76
testRunner.Then("ao clicar no botão Analise de Fechamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 77
testRunner.And(@"verificar que deve informar com a mensagem ""É necessário informar no cadastro do Cliente um contato do Principal"" / ""É necessário informar no cadastro do Cliente um contato do Tipo Fiscal"" / ""É necessário preencher a data de entrega do orçamento"" / ""Há itens sem data de entrega informada, favor verificar"" / ""É necessário preencher a condição de entrega do orçamento.""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 78
testRunner.Then("Inserir data de entrega na capa", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 79
testRunner.Then("ao clicar no botão Analise de Fechamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 80
testRunner.And(@"verificar que deve mostrar ""É necessário informar no cadastro do Cliente um contato do Principal"" / ""É necessário informar no cadastro do Cliente um contato do Tipo Fiscal"" / ""Há itens sem data de entrega informada, favor verificar"" / ""É necessário preencher a condição de entrega do orçamento.""", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 81
testRunner.Then("Inserir data de entrega nos itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 82
testRunner.Then("ao clicar no botão Analise de Fechamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 83
testRunner.And("verificar que deve mostrar a mensagem \"É necessário informar no cadastro do Clien" +
                        "te um contato do Principal\" / \"É necessário informar no cadastro do Cliente um c" +
                        "ontato do Tipo Fiscal\" / \"É necessário preencher a condição de entrega do orçame" +
                        "nto.\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 84
testRunner.Then("Inserir Condição de entrega nos itens", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 85
testRunner.Then("ao clicar no botão Analise de Fechamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 86
testRunner.And("verificar que deve informar \"É necessário informar no cadastro do Cliente um cont" +
                        "ato do Principal\" / \"É necessário informar no cadastro do Cliente um contato do " +
                        "Tipo Fiscal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 87
testRunner.Then("alterar o cliente para MARCIO GONÇALVES", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 88
testRunner.Then("ao clicar no botão Analise de Fechamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Entao ");
#line hidden
#line 89
testRunner.And("verificar que a mensagem será de sem pendencias para fechamento de orçamento", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 90
testRunner.And("zerar o preço de um item direto pela base de dados", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
#line 91
testRunner.And("verificar se valida corretamente que existe itens com valor zerado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "E ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
